"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const swaggerUi = require("swagger-ui-express");
const fs = __importStar(require("fs"));
const bodyParser = __importStar(require("body-parser"));
const path_1 = require("path");
const winston = require("winston");
winston.configure({
    transports: [
        new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
        new winston.transports.File({ filename: 'logs/combined.log' }),
    ],
    format: winston.format.combine(winston.format.timestamp(), winston.format.json()),
});
class App {
    constructor(controllers, port) {
        this.app = express();
        this.port = port;
        this.initializeMiddlewares();
        this.initializeControllers(controllers);
        this.server = this.app.listen(this.port, () => {
            winston.info({ action: 'startup', message: `App listening on the port ${this.port}` });
        });
    }
    initializeMiddlewares() {
        this.app.use(bodyParser.json({ limit: '50mb' }));
        const openApiDocumentation = JSON.parse(fs.readFileSync(path_1.resolve(__dirname, 'openApiDocumentation_merged.json'), 'utf8'));
        this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(openApiDocumentation));
        /*
        this.app.use((request: express.Request,
            response: express.Response,
            next: Function) => {
          winston.debug(`${request.method} ${request.path}`);
          next();
        });
        */
    }
    initializeControllers(controllers) {
        controllers.forEach((controller) => {
            this.app.use('/', controller.router);
        });
    }
}
exports.App = App;
// export default App;
//# sourceMappingURL=app.js.map