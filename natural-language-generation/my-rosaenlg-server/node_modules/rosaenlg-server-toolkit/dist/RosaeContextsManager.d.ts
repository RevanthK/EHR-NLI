import { RosaeContext } from './RosaeContext';
import { PackagedTemplateWithUser, RosaeNlgFeatures } from 'rosaenlg-packager';
export interface CacheValue {
    templateSha1: string;
    rosaeContext: RosaeContext;
}
export interface RosaeContextsManagerParams {
    forgetTemplates?: boolean;
    specificTtl?: number;
    specificCheckPeriod?: number;
    enableCache?: boolean;
}
export interface UserAndTemplateId {
    user: string;
    templateId: string;
}
export declare abstract class RosaeContextsManager {
    private ttl;
    private cacheCheckPeriod;
    private forgetTemplates;
    protected enableCache: boolean;
    protected rosaeNlgFeatures: RosaeNlgFeatures;
    private rosaeContextsCache;
    constructor(rosaeContextsManagerParams: RosaeContextsManagerParams);
    protected abstract getAllFiles(cb: (err: Error, files: string[]) => void): void;
    protected abstract getUserAndTemplateId(filename: string): UserAndTemplateId;
    protected abstract saveOnBackend(filename: string, content: string, cb: (err: Error) => void): void;
    abstract getFilename(user: string, templateId: string): string;
    abstract deleteFromBackend(filename: string, cb: (err: Error) => void): void;
    abstract readTemplateOnBackend(user: string, templateId: string, cb: (err: Error, templateContent: PackagedTemplateWithUser) => void): void;
    abstract hasBackend(): boolean;
    abstract checkHealth(cb: (err: Error) => void): void;
    readTemplateOnBackendAndLoad(user: string, templateId: string, cb: (err: Error, templateSha1: string) => void): void;
    reloadAllFiles(cb: (err: Error) => void): void;
    getFromCacheOrLoad(user: string, templateId: string, askedSha1: string, cb: (err: Error, cacheValue: CacheValue) => void): void;
    deleteFromCacheAndBackend(user: string, templateId: string, cb: (err: Error) => void): void;
    protected getKindOfUuid(): string;
    compSaveAndLoad(templateContent: PackagedTemplateWithUser, alwaysSave: boolean, cb: (err: Error, templateSha1: string, rosaeContext: RosaeContext) => void): void;
    getIdsFromBackend(user: string, cb: (err: Error, templates: string[]) => void): void;
    protected getUserAndTemplateIdHelper(filename: string, sep: string): UserAndTemplateId;
    private checkCacheEnable;
    private getCacheKey;
    getFromCache(user: string, templateId: string): CacheValue;
    isInCache(user: string, templateId: string): boolean;
    isInCacheWithGoodSha1(user: string, templateId: string, templateSha1: string): boolean;
    setInCache(user: string, templateId: string, cacheValue: CacheValue, isTemp: boolean): void;
    deleteFromCache(user: string, templateId: string): void;
    getIdsInCache(user: string): string[];
}
