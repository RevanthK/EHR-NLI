"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RosaeContextsManager_1 = require("./RosaeContextsManager");
class MemoryRosaeContextsManager extends RosaeContextsManager_1.RosaeContextsManager {
    constructor(rosaeNlgFeatures, rosaeContextsManagerParams) {
        super(rosaeContextsManagerParams);
        this.rosaeNlgFeatures = rosaeNlgFeatures;
        console.info({
            action: 'configure',
            message: `templates only in memory`,
        });
    }
    hasBackend() {
        return false;
    }
    checkHealth(cb) {
        // always healthy
        cb(null);
    }
    getFilename(_user, _templateId) {
        const err = new Error();
        err.name = 'InvalidArgumentException';
        err.message = 'getFilename must not be called on MemoryRosaeContextsManager';
        throw err;
    }
    getAllFiles(cb) {
        const err = new Error();
        err.name = 'InvalidArgumentException';
        err.message = 'getAllFiles must not be called on MemoryRosaeContextsManager';
        cb(err, null);
        return;
    }
    readTemplateOnBackend(user, templateId, cb) {
        // find whatever we can in the cache
        if (this.enableCache && this.isInCache(user, templateId)) {
            const foundInCache = this.getFromCache(user, templateId);
            cb(null, foundInCache.rosaeContext.getFullTemplate());
            return;
        }
        const err = new Error();
        err.name = '404';
        err.message = 'not found in cache';
        cb(err, null);
        return;
    }
    getUserAndTemplateId(_filename) {
        const err = new Error();
        err.name = 'InvalidArgumentException';
        err.message = 'getUserAndTemplateId must not be called on MemoryRosaeContextsManager';
        throw err;
    }
    saveOnBackend(_filename, _content, cb) {
        const err = new Error();
        err.name = 'InvalidArgumentException';
        err.message = 'saveOnBackend must not be called on MemoryRosaeContextsManager';
        cb(err);
        return;
    }
    deleteFromBackend(filename, cb) {
        const err = new Error();
        err.name = 'InvalidArgumentException';
        err.message = 'deleteFromBackend must not be called on MemoryRosaeContextsManager';
        cb(err);
        return;
    }
}
exports.MemoryRosaeContextsManager = MemoryRosaeContextsManager;
//# sourceMappingURL=MemoryRosaeContextsManager.js.map