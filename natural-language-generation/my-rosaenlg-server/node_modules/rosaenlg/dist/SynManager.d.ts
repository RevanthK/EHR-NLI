import { RandomManager } from './RandomManager';
import { SaveRollbackManager } from './SaveRollbackManager';
export declare type SynoSeq = Map<string, number>;
export declare type SynoTriggered = Map<string, number[]>;
export declare type SynoMode = 'sequence' | 'random' | 'once';
interface RunSynzParams {
    force: number;
    mode: SynoMode;
}
export declare class SynManager {
    private saveRollbackManager;
    private randomManager;
    private defaultSynoMode;
    private spy;
    private synoSeq;
    private synoTriggered;
    constructor(randomManager: RandomManager, saveRollbackManager: SaveRollbackManager, defaultSynoMode: SynoMode);
    setSpy(spy: Spy): void;
    getSynoSeq(): SynoSeq;
    setSynoSeq(synoSeq: SynoSeq): void;
    getSynoTriggered(): SynoTriggered;
    setSynoTriggered(synoTriggered: SynoTriggered): void;
    private getSynoTriggeredOn;
    private getNextSeqNotIn;
    synFct(items: any[]): any;
    simpleSyn(items: any[]): void;
    runSynz(which: string, size: number, params: RunSynzParams, excludeParam: number[]): void;
}
export {};
