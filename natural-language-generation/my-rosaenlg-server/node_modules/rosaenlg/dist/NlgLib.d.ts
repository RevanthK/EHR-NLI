/// <reference types="numeral" />
import { SynoMode } from './SynManager';
import { LefffHelper } from 'lefff-helper';
import { GermanDictHelper } from 'german-dict-helper';
import { MorphItHelper } from 'morph-it-helper';
import { SaidManager } from './SaidManager';
export declare type Languages = 'en_US' | 'fr_FR' | 'de_DE' | 'it_IT' | string;
export declare type Genders = 'M' | 'F' | 'N';
export declare type GendersMF = 'M' | 'F';
export declare type Numbers = 'S' | 'P';
export declare type GermanCases = 'NOMINATIVE' | 'ACCUSATIVE' | 'DATIVE' | 'GENITIVE';
export declare type DictHelper = LefffHelper | GermanDictHelper | MorphItHelper;
export interface RosaeNlgParams {
    language: Languages;
    forceRandomSeed?: number;
    defaultSynoMode?: SynoMode;
    defaultAmong?: number;
}
export declare function getRosaeNlgVersion(): string;
export declare class NlgLib {
    private valueManager;
    private synManager;
    private choosebestManager;
    private verbsManager;
    private refsManager;
    private adjectiveManager;
    private asmManager;
    private helper;
    private substantiveManager;
    private possessiveManager;
    private saveRollbackManager;
    private randomManager;
    private genderNumberManager;
    private saidManager;
    private nominalGroupManager;
    private dictHelper;
    private embeddedLinguisticResources;
    private spy;
    private randomSeed;
    private language;
    moment: any;
    numeral: Numeral;
    constructor(params: RosaeNlgParams);
    setSpy(spy: Spy): void;
    filterAll(unfiltered: string): string;
    getSaidManager(): SaidManager;
}
