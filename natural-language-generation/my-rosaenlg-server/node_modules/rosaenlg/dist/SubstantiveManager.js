"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const german_words_1 = require("german-words");
const german_words_dict_1 = __importDefault(require("german-words-dict"));
const italian_words_1 = require("italian-words");
const italian_words_dict_1 = __importDefault(require("italian-words-dict"));
const english_plurals_list_1 = __importDefault(require("english-plurals-list"));
const english_plurals_1 = require("english-plurals");
const pluralize_fr_1 = __importDefault(require("pluralize-fr"));
//import * as Debug from 'debug';
//const debug = Debug('rosaenlg');
class SubstantiveManager {
    constructor(language, genderNumberManager) {
        this.language = language;
        this.genderNumberManager = genderNumberManager;
    }
    setSpy(spy) {
        this.spy = spy;
    }
    setEmbeddedWords(embeddedWords) {
        this.embeddedWords = embeddedWords;
    }
    getSubstantiveEn(subst, number) {
        if (number === 'S') {
            return subst;
        }
        else {
            return english_plurals_1.getPlural(this.embeddedWords || english_plurals_list_1.default, subst);
        }
    }
    // todo, or not todo?
    getSubstFeminineFr(subst) {
        return subst;
    }
    getSubstPluralFr(subst) {
        return pluralize_fr_1.default(subst);
    }
    getSubstantiveFr(subst, gender, number) {
        // debug(`getSubstantiveFr on ${subst} gender ${gender} number ${number}`);
        const withGender = gender === 'F' ? this.getSubstFeminineFr(subst) : subst;
        const withNumber = number === 'P' ? this.getSubstPluralFr(withGender) : withGender;
        return withNumber;
    }
    getSubstantiveIt(subst, gender, number) {
        return italian_words_1.getNumberItalianWord(this.embeddedWords || italian_words_dict_1.default, subst, number);
    }
    getSubstantiveDe(subst, number, germanCase) {
        // in this (very specific, too specific?...) case it's ok if not in dict
        if (this.language === 'de_DE' && germanCase === 'NOMINATIVE' && number === 'S') {
            return subst;
        }
        else {
            return german_words_1.getCaseGermanWord(this.embeddedWords || german_words_dict_1.default, subst, germanCase, number);
        }
    }
    getSubstantive(subst, subject, params) {
        if (this.spy.isEvaluatingEmpty()) {
            return 'SOME_SUBST';
        }
        else {
            let gender;
            let number;
            if (subject) {
                gender = this.genderNumberManager.getRefGender(subject, null);
                number = this.genderNumberManager.getRefNumber(subject, null);
            }
            else {
                gender = params.gender;
                number = params.numberOwned;
            }
            switch (this.language) {
                case 'en_US':
                    return this.getSubstantiveEn(subst, number);
                case 'de_DE':
                    return this.getSubstantiveDe(subst, number, params.case);
                case 'fr_FR':
                    return this.getSubstantiveFr(subst, gender, number);
                case 'it_IT':
                    return this.getSubstantiveIt(subst, gender, number);
                default:
                    return subst;
            }
        }
    }
}
exports.SubstantiveManager = SubstantiveManager;
//# sourceMappingURL=SubstantiveManager.js.map