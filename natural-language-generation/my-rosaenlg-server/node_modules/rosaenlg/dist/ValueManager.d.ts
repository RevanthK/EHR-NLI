import { RefsManager, RepresentantType } from './RefsManager';
import { RandomManager } from './RandomManager';
import { AdjectiveManager } from './AdjectiveManager';
import { SubstantiveManager } from './SubstantiveManager';
import { Helper } from './Helper';
import { GenderNumberManager } from './GenderNumberManager';
import { DetTypes } from './Determiner';
import { PossessiveManager } from './PossessiveManager';
import { Languages, DictHelper, Numbers, Genders, GermanCases } from './NlgLib';
import { AsmManager } from './AsmManager';
import 'numeral/locales/de';
import 'numeral/locales/fr';
import 'numeral/locales/it';
import 'moment/locale/fr';
import 'moment/locale/de';
import 'moment/locale/it';
import { Dist } from '../../english-determiners/dist';
export declare type AdjPos = 'BEFORE' | 'AFTER';
declare type AdjStructure = string | string[];
export interface ValueParams {
    owner: any;
    represents: any;
    gender: Genders;
    number: Numbers;
    genderOwned: Genders;
    numberOwned: Numbers;
    genderOwner: Genders;
    numberOwner: Numbers;
    case: GermanCases;
    det: DetTypes;
    adj: AdjStructure;
    adjPos: AdjPos;
    dist: Dist;
    debug: boolean;
    dateFormat: string;
    REPRESENTANT: RepresentantType;
    AS_IS: boolean;
    TEXTUAL: boolean;
    ORDINAL_NUMBER: boolean;
    ORDINAL_TEXTUAL: boolean;
    FORMAT: string;
    possessiveAdj: string;
    agree: any;
}
export declare class ValueManager {
    private language;
    private refsManager;
    private genderNumberManager;
    private randomManager;
    private adjectiveManager;
    private substantiveManager;
    private helper;
    private possessiveManager;
    private dictHelper;
    private asmManager;
    private spy;
    private simplifiedStringsCache;
    constructor(language: Languages, refsManager: RefsManager, genderNumberManager: GenderNumberManager, randomManager: RandomManager, adjectiveManager: AdjectiveManager, substantiveManager: SubstantiveManager, helper: Helper, possessiveManager: PossessiveManager, dictHelper: DictHelper, asmManager: AsmManager);
    setSpy(spy: Spy): void;
    value(obj: any, params: ValueParams): void;
    private getLangForMoment;
    private valueDate;
    private valueSimplifiedString;
    private valueString;
    private valueObject;
    private valueRefexpr;
    private valueRef;
    private getLangForNumeral;
    private valueNumberTextualFloatPart;
    private valueNumberTextual;
    private valueNumber;
}
export {};
