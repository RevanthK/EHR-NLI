"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const french_adjectives_1 = require("french-adjectives");
const german_adjectives_1 = require("german-adjectives");
const german_adjectives_dict_1 = __importDefault(require("german-adjectives-dict"));
const italian_adjectives_1 = require("italian-adjectives");
const italian_adjectives_dict_1 = __importDefault(require("italian-adjectives-dict"));
const rosaenlg_filter_1 = require("rosaenlg-filter");
class AdjectiveManager {
    constructor(language, genderNumberManager) {
        this.language = language;
        this.genderNumberManager = genderNumberManager;
    }
    setSpy(spy) {
        this.spy = spy;
    }
    setEmbeddedAdj(embeddedAdjs) {
        this.embeddedAdjs = embeddedAdjs;
    }
    agreeAdj(adjective, subject, params) {
        this.spy.appendDoubleSpace();
        const agreedAdj = this.getAgreeAdj(adjective, subject, params);
        this.spy.appendPugHtml(agreedAdj);
        if (this.language === 'it_IT' && agreedAdj.endsWith("'")) {
            // bell'uomo
            this.spy.appendPugHtml(`¤${rosaenlg_filter_1.EATSPACE}¤`);
        }
        this.spy.appendDoubleSpace();
    }
    getAgreeAdj(adjective, subject, params) {
        if (this.spy.isEvaluatingEmpty()) {
            return 'SOME_ADJ';
        }
        else {
            // debug(`getAgreeAdj ${adjective} ${JSON.stringify(subject)} ${JSON.stringify(params)}`);
            const gender = this.genderNumberManager.getRefGender(subject, params);
            const number = this.genderNumberManager.getRefNumber(subject, params) || 'S';
            // debug('agreeAdj:' + ' gender=' + gender + ' number=' + number + ' / ' + adjective + ' / ' + JSON.stringify(subject).substring(0, 20) );
            switch (this.language) {
                case 'fr_FR':
                    return french_adjectives_1.agree(adjective, gender, number, subject, params && params.adjPos === 'BEFORE');
                case 'de_DE':
                    return german_adjectives_1.agreeGermanAdjective(this.embeddedAdjs || german_adjectives_dict_1.default, adjective, params.case, gender, number, params.det);
                case 'it_IT':
                    return italian_adjectives_1.agreeItalianAdjective(this.embeddedAdjs || italian_adjectives_dict_1.default, adjective, gender, number, subject, params && params.adjPos === 'BEFORE');
                case 'en_US': // no agreement for adjectives in English
                default:
                    return adjective;
            }
        }
    }
}
exports.AdjectiveManager = AdjectiveManager;
//# sourceMappingURL=AdjectiveManager.js.map