"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ValueManager_1 = require("./ValueManager");
const SynManager_1 = require("./SynManager");
const ChoosebestManager_1 = require("./ChoosebestManager");
const VerbsManager_1 = require("./VerbsManager");
const RefsManager_1 = require("./RefsManager");
const rosaenlg_filter_1 = require("rosaenlg-filter");
const AdjectiveManager_1 = require("./AdjectiveManager");
const AsmManager_1 = require("./AsmManager");
const Helper_1 = require("./Helper");
const SubstantiveManager_1 = require("./SubstantiveManager");
const PossessiveManager_1 = require("./PossessiveManager");
const NominalGroupManager_1 = require("./NominalGroupManager");
const SaveRollbackManager_1 = require("./SaveRollbackManager");
const RandomManager_1 = require("./RandomManager");
const lefff_helper_1 = require("lefff-helper");
const german_dict_helper_1 = require("german-dict-helper");
const morph_it_helper_1 = require("morph-it-helper");
const moment_1 = __importDefault(require("moment"));
const numeral_1 = __importDefault(require("numeral"));
const GenderNumberManager_1 = require("./GenderNumberManager");
const SaidManager_1 = require("./SaidManager");
function getRosaeNlgVersion() {
    return '1.14.3'; // will be replaced by gulp when copied into dist/
}
exports.getRosaeNlgVersion = getRosaeNlgVersion;
class NlgLib {
    constructor(params) {
        // const fullySupportedLanguages: string[] = ['fr_FR', 'en_US', 'de_DE', 'it_IT'];
        // forceRandomSeed can be 0 and be valid so test not null
        this.randomSeed =
            params && params.forceRandomSeed != null ? params.forceRandomSeed : Math.floor(Math.random() * 1000); //NOSONAR
        //console.log("seed: " + this.randomSeed);
        this.randomManager = new RandomManager_1.RandomManager(this.randomSeed);
        if (params && params.language) {
            this.language = params.language;
        }
        else {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = `must provide a language`;
            throw err;
        }
        {
            // referencing libs for custom user usage
            // same for moment
            this.moment = moment_1.default;
            // same for numeral
            this.numeral = numeral_1.default;
        }
        this.saveRollbackManager = new SaveRollbackManager_1.SaveRollbackManager();
        this.genderNumberManager = new GenderNumberManager_1.GenderNumberManager(this.language);
        this.helper = new Helper_1.Helper(this.genderNumberManager);
        this.verbsManager = new VerbsManager_1.VerbsManager(this.language, this.genderNumberManager);
        this.synManager = new SynManager_1.SynManager(this.randomManager, this.saveRollbackManager, params.defaultSynoMode || 'random');
        this.choosebestManager = new ChoosebestManager_1.ChoosebestManager(this.language, this.saveRollbackManager, this.randomManager, params.defaultAmong || 5);
        this.asmManager = new AsmManager_1.AsmManager(this.language, this.saveRollbackManager, this.randomManager);
        this.saidManager = new SaidManager_1.SaidManager();
        this.refsManager = new RefsManager_1.RefsManager(this.saveRollbackManager, this.genderNumberManager, this.randomManager);
        this.adjectiveManager = new AdjectiveManager_1.AdjectiveManager(this.language, this.genderNumberManager);
        this.substantiveManager = new SubstantiveManager_1.SubstantiveManager(this.language, this.genderNumberManager);
        this.possessiveManager = new PossessiveManager_1.PossessiveManager(this.language, this.genderNumberManager, this.refsManager, this.helper);
        try {
            switch (this.language) {
                case 'fr_FR': {
                    this.dictHelper = new lefff_helper_1.LefffHelper();
                    break;
                }
                case 'de_DE': {
                    this.dictHelper = new german_dict_helper_1.GermanDictHelper();
                    break;
                }
                case 'it_IT': {
                    this.dictHelper = new morph_it_helper_1.MorphItHelper();
                    break;
                }
                case 'en_US':
                default:
                // nothing
            }
        }
        catch (err) {
            // console.log('well, we are in browser');
        }
        this.valueManager = new ValueManager_1.ValueManager(this.language, this.refsManager, this.genderNumberManager, this.randomManager, this.adjectiveManager, this.substantiveManager, this.helper, this.possessiveManager, this.dictHelper, this.asmManager);
        this.nominalGroupManager = new NominalGroupManager_1.NominalGroupManager(this.language, this.verbsManager, this.valueManager, this.adjectiveManager);
        this.saveRollbackManager.bindObjects(this.saidManager, this.refsManager, this.genderNumberManager, this.randomManager, this.synManager, this.verbsManager);
    }
    setSpy(spy) {
        this.spy = spy;
        // transfer knowledge
        this.valueManager.setSpy(spy);
        this.synManager.setSpy(spy);
        this.choosebestManager.setSpy(spy);
        this.verbsManager.setSpy(spy);
        this.refsManager.setSpy(spy);
        this.adjectiveManager.setSpy(spy);
        this.asmManager.setSpy(spy);
        this.helper.setSpy(spy);
        this.substantiveManager.setSpy(spy);
        this.possessiveManager.setSpy(spy);
        this.nominalGroupManager.setSpy(spy);
        this.saveRollbackManager.setSpy(spy);
        // console.log('before trying to get embeddedLinguisticResources');
        this.embeddedLinguisticResources = this.spy.getEmbeddedLinguisticResources();
        // console.log(`NlgLib just got resources: ${JSON.stringify(this.embeddedLinguisticResources)}`);
        if (this.embeddedLinguisticResources) {
            // verbs
            this.verbsManager.setEmbeddedVerbs(this.embeddedLinguisticResources.verbs);
            // words
            // fr + de
            this.genderNumberManager.setEmbeddedWords(this.embeddedLinguisticResources.words);
            // de only
            this.substantiveManager.setEmbeddedWords(this.embeddedLinguisticResources.words);
            this.possessiveManager.setEmbeddedWords(this.embeddedLinguisticResources.words);
            this.adjectiveManager.setEmbeddedAdj(this.embeddedLinguisticResources.adjectives);
        }
    }
    filterAll(unfiltered) {
        return rosaenlg_filter_1.filter(unfiltered, this.language);
    }
    getSaidManager() {
        return this.saidManager;
    }
}
exports.NlgLib = NlgLib;
//# sourceMappingURL=NlgLib.js.map