"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getWordInfo(wordsList, word) {
    if (!wordsList) {
        const err = new Error();
        err.name = 'InvalidArgumentError';
        err.message = `words list cannot be null`;
        throw err;
    }
    if (wordsList[word]) {
        return wordsList[word];
    }
    else {
        const err = new Error();
        err.name = 'NotFoundInDict';
        err.message = `${word} was not found in German dict`;
        throw err;
    }
}
exports.getWordInfo = getWordInfo;
function getCaseGermanWord(wordsList, word, germanCase, number) {
    if (number != 'S' && number != 'P') {
        const err = new Error();
        err.name = 'InvalidArgumentError';
        err.message = `number must be S or P`;
        throw err;
    }
    const wordInfo = getWordInfo(wordsList, word);
    const casesMapping = {
        NOMINATIVE: 'NOM',
        ACCUSATIVE: 'AKK',
        DATIVE: 'DAT',
        GENITIVE: 'GEN',
    };
    if (!casesMapping[germanCase]) {
        const err = new Error();
        err.name = 'TypeError';
        err.message = `${germanCase} is not a supported German case`;
        throw err;
    }
    return wordInfo[casesMapping[germanCase]][number == 'S' ? 'SIN' : 'PLU'];
}
exports.getCaseGermanWord = getCaseGermanWord;
function getGenderGermanWord(wordsList, word) {
    const wordInfo = getWordInfo(wordsList, word);
    return wordInfo['G'];
}
exports.getGenderGermanWord = getGenderGermanWord;
//# sourceMappingURL=index.js.map