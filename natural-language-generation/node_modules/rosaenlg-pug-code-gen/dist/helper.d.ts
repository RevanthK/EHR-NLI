import * as englishVerbs from 'english-verbs-helper';
import * as frenchVerbs from 'french-verbs';
import * as germanWords from 'german-words';
import * as germanAdjectives from 'german-adjectives';
import * as germanVerbs from 'german-verbs';
import * as italianAdjectives from 'italian-adjectives';
import * as italianWords from 'italian-words';
import * as italianVerbs from 'italian-verbs';
export declare type Languages = 'en_US' | 'fr_FR' | 'de_DE' | 'it_IT' | string;
export declare type GendersMF = 'M' | 'F';
export declare type VerbData = frenchVerbs.VerbInfo | germanVerbs.VerbInfo | italianVerbs.VerbInfo | englishVerbs.VerbInfo;
export interface VerbsData {
    [key: string]: VerbData;
}
export declare type WordData = GendersMF | germanWords.WordInfo | italianWords.WordInfo | string;
export interface WordsData {
    [key: string]: WordData;
}
export declare type AdjectiveData = germanAdjectives.AdjectiveInfo | italianAdjectives.AdjectiveInfo;
export interface AdjectivesData {
    [key: string]: AdjectiveData;
}
export interface LinguisticResources {
    verbs: VerbsData;
    words: WordsData;
    adjectives: AdjectivesData;
}
export declare class CodeGenHelper {
    private language;
    private embedResources;
    private verbCandidates;
    private wordCandidates;
    private adjectiveCandidates;
    private mergedVerbsDataEn;
    getVerbCandidates(): string[];
    getWordCandidates(): string[];
    getAdjectiveCandidates(): string[];
    constructor(language: Languages, embedResources: boolean);
    getAllLinguisticResources(explicitResources: LinguisticResources): LinguisticResources;
    getVerbCandidatesData(): VerbsData;
    getWordCandidatesData(): WordsData;
    getAdjectiveCandidatesData(): AdjectivesData;
    private extractHelper;
    extractVerbCandidate(args: string): void;
    getVerbCandidate(args: string): string;
    extractWordCandidateFromSetRefGender(args: string): void;
    getWordCandidateFromSetRefGender(args: string): string;
    extractAdjectiveCandidateFromAgreeAdj(args: string): void;
    getAdjectiveCandidateFromAgreeAdj(args: string): string;
    extractAdjectiveCandidateFromValue(args: string): void;
    getAdjectiveCandidatesFromValue(args: string): string[];
    extractWordCandidateFromThirdPossession(args: string): void;
    getWordCandidateFromThirdPossession(args: string): string;
    extractWordCandidateFromSubstantive(args: string): void;
    getWordCandidateFromSubstantive(args: string): string;
    extractWordCandidateFromValue(args: string): void;
    getWordCandidateFromValue(args: string): string;
}
